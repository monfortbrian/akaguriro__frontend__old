{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar enterKey = {\n  keys: ['Enter'],\n  keyCode: 13\n};\nvar tabKey = {\n  keys: ['Tab'],\n  keyCode: 9\n};\nvar spaceBarKey = {\n  keys: [' '],\n  keyCode: 32\n};\nvar escapeKey = {\n  keys: ['Escape', 'Esc'],\n  keyCode: 27\n  /**\n   * Per the MDN, KeyboardEvent.keyCode and KeyboardEvent.which\n   * are deprecated. KeyboardEvent.code is not to be used to\n   * determine what character corresponds with a key event\n   * and is also not supported on Edge. KeyboardEvent.key is the\n   * preferred method, but seems less reliable than keyCode given\n   * it returns different strings for different browsers; ex: \"Escape\"\n   * in Chrome, but \"Esc\" in Edge. This function future proofs\n   * against deprecation, while still giving preference to the more\n   * reliable keyCode.\n   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\n   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code\n   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\n   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/which\n   *\n   * KeyMap : { keyCode: Number, keys: [ String ] }\n   * isKey : KeyMap -> KeyboardEvent -> Boolean\n   */\n\n};\n\nvar isKey = function isKey(_ref) {\n  var keyCode = _ref.keyCode,\n      keys = _ref.keys;\n  return function (e) {\n    return e.keyCode ? e.keyCode === keyCode : keys.indexOf(e.key) !== -1;\n  };\n}; // is<X>Key : KeyboardEvent -> Boolean\n\n\nvar isEnterOrSpaceBarKey = exports.isEnterOrSpaceBarKey = function isEnterOrSpaceBarKey(e) {\n  return isKey(enterKey)(e) || isSpaceBarKey(e);\n};\n\nvar isTabKey = exports.isTabKey = isKey(tabKey);\nvar isSpaceBarKey = exports.isSpaceBarKey = isKey(spaceBarKey);\nvar isEscapeKey = exports.isEscapeKey = isKey(escapeKey);","map":{"version":3,"sources":["/Users/brian/Downloads/AKAGURIRO__revamp/frontend/node_modules/react-medium-image-zoom/lib/keyboardEvents.js"],"names":["Object","defineProperty","exports","value","enterKey","keys","keyCode","tabKey","spaceBarKey","escapeKey","isKey","_ref","e","indexOf","key","isEnterOrSpaceBarKey","isSpaceBarKey","isTabKey","isEscapeKey"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGA,IAAIC,QAAQ,GAAG;AACbC,EAAAA,IAAI,EAAE,CAAC,OAAD,CADO;AAEbC,EAAAA,OAAO,EAAE;AAFI,CAAf;AAKA,IAAIC,MAAM,GAAG;AACXF,EAAAA,IAAI,EAAE,CAAC,KAAD,CADK;AAEXC,EAAAA,OAAO,EAAE;AAFE,CAAb;AAKA,IAAIE,WAAW,GAAG;AAChBH,EAAAA,IAAI,EAAE,CAAC,GAAD,CADU;AAEhBC,EAAAA,OAAO,EAAE;AAFO,CAAlB;AAKA,IAAIG,SAAS,GAAG;AACdJ,EAAAA,IAAI,EAAE,CAAC,QAAD,EAAW,KAAX,CADQ;AAEdC,EAAAA,OAAO,EAAE;AAET;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AArBgB,CAAhB;;AAsBE,IAAII,KAAK,GAAG,SAASA,KAAT,CAAeC,IAAf,EAAqB;AACjC,MAAIL,OAAO,GAAGK,IAAI,CAACL,OAAnB;AAAA,MACID,IAAI,GAAGM,IAAI,CAACN,IADhB;AAEA,SAAO,UAAUO,CAAV,EAAa;AAClB,WAAOA,CAAC,CAACN,OAAF,GAAYM,CAAC,CAACN,OAAF,KAAcA,OAA1B,GAAoCD,IAAI,CAACQ,OAAL,CAAaD,CAAC,CAACE,GAAf,MAAwB,CAAC,CAApE;AACD,GAFD;AAGD,CANC,C,CAQF;;;AACA,IAAIC,oBAAoB,GAAGb,OAAO,CAACa,oBAAR,GAA+B,SAASA,oBAAT,CAA8BH,CAA9B,EAAiC;AACzF,SAAOF,KAAK,CAACN,QAAD,CAAL,CAAgBQ,CAAhB,KAAsBI,aAAa,CAACJ,CAAD,CAA1C;AACD,CAFD;;AAGA,IAAIK,QAAQ,GAAGf,OAAO,CAACe,QAAR,GAAmBP,KAAK,CAACH,MAAD,CAAvC;AACA,IAAIS,aAAa,GAAGd,OAAO,CAACc,aAAR,GAAwBN,KAAK,CAACF,WAAD,CAAjD;AACA,IAAIU,WAAW,GAAGhB,OAAO,CAACgB,WAAR,GAAsBR,KAAK,CAACD,SAAD,CAA7C","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar enterKey = {\n  keys: ['Enter'],\n  keyCode: 13\n};\n\nvar tabKey = {\n  keys: ['Tab'],\n  keyCode: 9\n};\n\nvar spaceBarKey = {\n  keys: [' '],\n  keyCode: 32\n};\n\nvar escapeKey = {\n  keys: ['Escape', 'Esc'],\n  keyCode: 27\n\n  /**\n   * Per the MDN, KeyboardEvent.keyCode and KeyboardEvent.which\n   * are deprecated. KeyboardEvent.code is not to be used to\n   * determine what character corresponds with a key event\n   * and is also not supported on Edge. KeyboardEvent.key is the\n   * preferred method, but seems less reliable than keyCode given\n   * it returns different strings for different browsers; ex: \"Escape\"\n   * in Chrome, but \"Esc\" in Edge. This function future proofs\n   * against deprecation, while still giving preference to the more\n   * reliable keyCode.\n   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\n   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code\n   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\n   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/which\n   *\n   * KeyMap : { keyCode: Number, keys: [ String ] }\n   * isKey : KeyMap -> KeyboardEvent -> Boolean\n   */\n};var isKey = function isKey(_ref) {\n  var keyCode = _ref.keyCode,\n      keys = _ref.keys;\n  return function (e) {\n    return e.keyCode ? e.keyCode === keyCode : keys.indexOf(e.key) !== -1;\n  };\n};\n\n// is<X>Key : KeyboardEvent -> Boolean\nvar isEnterOrSpaceBarKey = exports.isEnterOrSpaceBarKey = function isEnterOrSpaceBarKey(e) {\n  return isKey(enterKey)(e) || isSpaceBarKey(e);\n};\nvar isTabKey = exports.isTabKey = isKey(tabKey);\nvar isSpaceBarKey = exports.isSpaceBarKey = isKey(spaceBarKey);\nvar isEscapeKey = exports.isEscapeKey = isKey(escapeKey);"]},"metadata":{},"sourceType":"script"}